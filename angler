#!/usr/bin/env python3
import json, os, shutil, argparse
import anglerExtractDefinitions
from anglerEnums import AnglerConfig, AnglerMode
from urllib.parse import urlparse

parser = argparse.ArgumentParser(description='A swagger gen for microservices')

parser.add_argument("-c", "--config", help="Path to the generator config", default="angler.json")
parser.add_argument("-v", "--verbose", help="Shows more details in log", action='store_true')

args = parser.parse_args()
isVerbose=args.verbose
swaggerGenBase="openapi-generator-cli generate -g typescript-angular "

try:
    config = open(f'./{args.config}')
    configJson = json.load(config)
except:
    print("No config found")
    exit()

def readFromJson(json, key: AnglerConfig, defaultValue: str = None):
    try:
        return json[key.value]
    except:
        print(f"{key.value} was not defined in config")
        if defaultValue is None:
            exit()
        else:
            print(f"{key.value} using defaultValue: {defaultValue}")
            return defaultValue

### read gateway address
# get swaggerUI path (e.g. http://localhost:8002/swagger)
swaggerUIPath = readFromJson(configJson, AnglerConfig.GATEWAY)
# get rid of any path (e.g. http://localhost:8002)
gatewayHost = swaggerUIPath.strip(urlparse(swaggerUIPath).path)

### read mode
mode = readFromJson(configJson, AnglerConfig.MODE, AnglerMode.AUTO.value)
try:
    mode = AnglerMode(configJson[AnglerConfig.MODE.value])
except:
    allModes = ", ".join([e.value for e in AnglerMode])
    print(f"Invalid mode set for angler.\nAvailable modes: {allModes}")
    exit()

if mode == AnglerMode.MANUAL and AnglerConfig.DEFINITIONS.value not in configJson:
    print(f"{AnglerMode.MANUAL.value} requires {AnglerConfig.DEFINITIONS.value} to be defined in the config")

if mode == AnglerMode.MANUAL:
    swaggerDefinitions = configJson['definitions']
else:
    swaggerDefinitions = anglerExtractDefinitions.getSwaggerDefinitions(swaggerUIPath)

### generationFolder
generationFolder = readFromJson(configJson, AnglerConfig.GENERATIONFOLDER, "./openapi")
createPath = os.path.abspath(os.getcwd()) + "/" + generationFolder

### read additional swaggergern properties
additionalProperties = readFromJson(configJson, AnglerConfig.OPENAPICLIADD, "")
swaggerGenBase += f"{additionalProperties} "

copyFiles=[".gitignore", "configuration.ts", "api.module.ts", "encoder.ts", "index.ts", "variables.ts"]
mergeFolders=["model", "api"]

def createFolder(folder):
    newFolder=f"{createPath}/{folder}"
    if not os.path.exists(newFolder):
        if (folder == ""):
            print(f"root directory created")
        else:
            print(f"{folder} directory created")
        os.mkdir(newFolder)
    else: 
        if (folder == ""):
            print(f"    root directory found")
        else:
            print(f"    {folder} directory found")

print("creating folder structure...")
createFolder("")
createFolder("model")
createFolder("api")
os.chdir(createPath)

def removeIfExist(path):
    if os.path.exists(path):
        os.remove(path)

print("\nremoving old files...")
removeIfExist("./api/api.ts")
removeIfExist("./model/models.ts")


# export const APIS = [NewsService, WeatherForecastService];
def mergeApiTs(sourceFile, destinationFile):
    # append contents if it exists
    if os.path.exists(destinationFile):
        sfile = open(sourceFile, "r")
        dFile = open(destinationFile, "r")
        sContent = sfile.readlines()
        dContent = dFile.readlines()

        # sourcfile: disect last line (export const APIS = ...) line
        sourceAPISLine = sContent[-1].split("=")
        # sourcfile: creating array of api services from said line
        sourceAPISClasses = sourceAPISLine[-1].strip().strip("[]; ")

        # destfile: disect last line (export const APIS = ...) line
        destAPISLine = dContent[-1].split("=")
        # destfile: creating array of api services from said line
        destAPISClasses = destAPISLine[-1].strip().strip("[]; ")

        #creating merged const APIS from source and dest
        newAPIConst = sourceAPISLine[0] + "= [" + sourceAPISClasses + ", " + destAPISClasses +  "]\n"
        # print(newAPIConst)

        # merge content of source and dest w/o const APIS
        newContent = "".join(dContent[:-1]).join(sContent[:-1])
        # add merged const APIS
        newContent+=newAPIConst

        # overwrite file with new content
        finalFile = open(destinationFile, "w")
        finalFile.write(newContent)
    # copy file in none exists
    else:
        shutil.copy(sourceFile, destinationFile)

def mergeModelTs(sourceFile, destinationFile):
    # append contents if it exists
    if os.path.exists(sourceFile):
        sfile = open(sourceFile, "r")
        dFile = open(destinationFile, "a")
        dFile.write(sfile.read())
    # copy file in none exists
    else:
        shutil.copy(sourceFile, destinationFile)

def copyFolder(src, dest):
    # print(f'copying from {src} to {dest}')
    sourcePath = os.path.abspath(os.getcwd()) + src
    destinationPath = os.path.abspath(os.getcwd()) + dest
    for fileName in os.listdir(sourcePath):
        sourceFile = sourcePath + fileName
        destinationFile = destinationPath + fileName
        
        if fileName == "api.ts":
            mergeApiTs(sourceFile, destinationFile)
        elif fileName == "models.ts":
            mergeModelTs(sourceFile, destinationFile)
        elif os.path.isfile(sourceFile):
            shutil.copy(sourceFile, destinationFile)
            # print('copied', fileName)

print("generating from openapi...")
# create services and models
for path in swaggerDefinitions:
    print(f"    generating {path}")
    swaggerGen=f"{swaggerGenBase} -o ./temp{path} -i {gatewayHost}{path}"
    if not isVerbose:
        swaggerGen+=" >/dev/null 2>&1"
    else:
        print(f"{swaggerGen}")
    os.system(swaggerGen) # >/dev/null 2>&1 to hide output
    for folder in mergeFolders:
        copyFolder(f"/temp{path}/{folder}/", f"/{folder}/")

# copying files that are the same for all generations from first generation
firstSwaggerGenPath=swaggerDefinitions[0]
for file in copyFiles:
    shutil.copyfile(f"./temp{firstSwaggerGenPath}/{file}", f"./{file}")

print("cleaning up tmp data...")
shutil.rmtree("./temp")

print("Done!")