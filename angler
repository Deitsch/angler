#!/usr/bin/env python3
import json, os, shutil, argparse
import anglerExtractDefinitions
from anglerGen import AnglerGen
from anglerEnums import AnglerConfig, AnglerMode
from urllib.parse import urlparse

parser = argparse.ArgumentParser(description='A swagger gen for microservices')

parser.add_argument("-c", "--config", help="Path to the generator config", default="angler.json")
parser.add_argument("-v", "--verbose", help="Shows more details in log", action='store_true')

args = parser.parse_args()
isVerbose=args.verbose
swaggerGenBase="openapi-generator-cli generate -g typescript-angular "

try:
    config = open(f'./{args.config}')
    configJson = json.load(config)
except:
    print("No config found")
    exit()

def readFromJson(json, key: AnglerConfig, defaultValue: str = None):
    try:
        return json[key.value]
    except:
        print(f"{key.value} was not defined in config")
        if defaultValue is None:
            exit()
        else:
            print(f"{key.value} using defaultValue: {defaultValue}")
            return defaultValue

### read gateway address
# get swaggerUI path (e.g. http://localhost:8002/swagger)
swaggerUIPath = readFromJson(configJson, AnglerConfig.GATEWAY)
# get rid of any path (e.g. http://localhost:8002)
gatewayHost = swaggerUIPath.strip(urlparse(swaggerUIPath).path)

### read mode
mode = readFromJson(configJson, AnglerConfig.MODE, AnglerMode.AUTO.value)
try:
    mode = AnglerMode(configJson[AnglerConfig.MODE.value])
except:
    allModes = ", ".join([e.value for e in AnglerMode])
    print(f"Invalid mode set for angler.\nAvailable modes: {allModes}")
    exit()

if mode == AnglerMode.MANUAL and AnglerConfig.DEFINITIONS.value not in configJson:
    print(f"{AnglerMode.MANUAL.value} requires {AnglerConfig.DEFINITIONS.value} to be defined in the config")

if mode == AnglerMode.MANUAL:
    swaggerDefinitions = configJson['definitions']
else:
    swaggerDefinitions = anglerExtractDefinitions.getSwaggerDefinitions(swaggerUIPath)

### generationFolder
generationFolder = readFromJson(configJson, AnglerConfig.GENERATIONFOLDER, "./openapi")
createPath = os.path.abspath(os.getcwd()) + "/" + generationFolder

### read additional swaggergern properties
additionalProperties = readFromJson(configJson, AnglerConfig.OPENAPICLIADD, "")
swaggerGenBase += f"{additionalProperties} "

def createFolder(folder):
    newFolder=f"{createPath}/{folder}"
    if not os.path.exists(newFolder):
        if (folder == ""):
            print(f"root directory created")
        else:
            print(f"{folder} directory created")
        os.mkdir(newFolder)
    else: 
        if (folder == ""):
            print(f"    root directory found")
        else:
            print(f"    {folder} directory found")

print("creating folder structure...")
createFolder("")
createFolder("model")
createFolder("api")
os.chdir(createPath)

def removeIfExist(path):
    if os.path.exists(path):
        os.remove(path)

print("\nremoving old files...")
removeIfExist("./api/api.ts")
removeIfExist("./model/models.ts")

gen = AnglerGen(gatewayHost, createPath, swaggerGenBase, swaggerDefinitions, isVerbose)
gen.generateCode()
